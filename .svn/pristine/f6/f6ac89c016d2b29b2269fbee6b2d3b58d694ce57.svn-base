package com.jeecms.cms.statistic.rankview;

import static com.jeecms.common.page.SimplePage.cpn;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import com.jeecms.cms.entity.main.Channel;
import com.jeecms.cms.manager.main.ChannelMng;
import com.jeecms.cms.statistic.CmsStatisticSvc;
import com.jeecms.cms.statistic.Rank;
import com.jeecms.common.page.Pagination;
import com.jeecms.common.util.DateFormatUtils;
import com.jeecms.common.web.CookieUtils;
import com.jeecms.core.entity.CmsDictionary;
import com.jeecms.core.entity.CmsSite;
import com.jeecms.core.entity.CmsUser;
import com.jeecms.core.manager.CmsDictionaryMng;
import com.jeecms.core.manager.CmsLogMng;
import com.jeecms.core.manager.CmsUserMng;
import com.jeecms.core.web.util.CmsUtils;
import com.jeecms.extend.entity.CmsDepartment;
import com.jeecms.extend.manager.CmsDepartmentMng;

@Controller
public class RankViewAct {
	@RequiresPermissions("statistic:rankview:toAdd")
	@RequestMapping("/statistic/rankview/toAdd.do")
	public String toAdd(HttpServletRequest request,ModelMap model){
		//获取部门信息
		List<CmsDepartment> deptopList = cmsDepartmentMng.getTopList();
		List<CmsDepartment> departmentList = CmsDepartment
				.getListForSelect(deptopList);

		model.addAttribute("departmentList", departmentList);
		//获取栏目信息
		Integer siteId = CmsUtils.getSiteId(request);
		List<Channel> topList = channelMng.getTopList(siteId, true);
		List<Channel> channelList = Channel.getListForSelect(topList, null,true);
		model.addAttribute("channelList", channelList);
		
		//设置展示数量列表
		List<RankView> viewCountList = createCountList(10);
		model.addAttribute("viewCountList", viewCountList);
		
		//设置排名模式信息
		List<CmsDictionary> dicList =  dictionaryMng.getList("rankview_pattern");
		model.addAttribute("patternList", dicList);
		return "statistic/rankview/add";
	}
	@RequiresPermissions("statistic:rankview:v_list")
	@RequestMapping("/statistic/rankview/v_list.do")
	public String toList(HttpServletRequest request,ModelMap model,Integer pageNo,
			String inputTitle,String inputStatus,String inputPattern){
		Integer siteId = CmsUtils.getSiteId(request);
		CmsUser user = CmsUtils.getUser(request);
		
		Pagination p = rankViewSvc.getPageByQuery(siteId,user,cpn(pageNo), CookieUtils.getPageSize(request),inputTitle,inputStatus,inputPattern);
		model.addAttribute("pagination", p);
		
		//取字典项,生成状态列表
		List<CmsDictionary> statusList = dictionaryMng.getList("rankview_status");
		model.addAttribute("statusList", statusList);
		//取字典项，生成排名pattern列表
		List<CmsDictionary> patternList = dictionaryMng.getList("rankview_pattern");
		model.addAttribute("patternList", patternList);
		if(!StringUtils.isBlank(inputTitle)){
			model.addAttribute("inputTitle", inputTitle);
		}
		if(!StringUtils.isBlank(inputStatus)){
			model.addAttribute("inputStatus", inputStatus);
		}
		if(!StringUtils.isBlank(inputPattern)){
			model.addAttribute("inputPattern", inputPattern);
		}
		return "statistic/rankview/list";
	}
	@RequiresPermissions("statistic:rankview:toEdit")
	@RequestMapping("/statistic/rankview/toEdit.do")
	public String toEdit(HttpServletRequest request,ModelMap model,Integer id,
			Integer pageNo,
			String inputTitle,String inputStatus,String inputPattern
			){
		Integer siteId = CmsUtils.getSiteId(request);
		if(id!=null){
			RankView rankView = rankViewSvc.findById(id);
			model.addAttribute("rankview", rankView);
			if(rankView.getChannel()!=null){
				Integer channelId = rankView.getChannel().getId();
				if(channelId!=null){
					model.addAttribute("channelId", channelId);
				}
			}
//			if(rankView.getDepartment()!=null){
//				Integer departmentId = rankView.getDepartment().getId();
//				if(departmentId!=null){
//					model.addAttribute("departmentId", departmentId);
//				}
//			}
		}
		// 获取部门信息
		List<CmsDepartment> deptopList = cmsDepartmentMng.getTopList();
		List<CmsDepartment> departmentList = CmsDepartment.getListForSelect(deptopList);
		model.addAttribute("departmentList", departmentList);
		//获取栏目信息
		List<Channel> topList = channelMng.getTopList(siteId, true);
		List<Channel> channelList = Channel.getListForSelect(topList, null,true);
		model.addAttribute("channelList", channelList);
		
		//设置展示数量列表
		List<RankView> viewCountList = createCountList(10);
		model.addAttribute("viewCountList", viewCountList);
		//设置排名模式信息
		List<CmsDictionary> dicList =  dictionaryMng.getList("rankview_pattern");
		model.addAttribute("patternList", dicList);
		if(pageNo!=null){
			model.addAttribute("pageNo", pageNo);
		}
		if(!StringUtils.isBlank(inputTitle)){
			model.addAttribute("inputTitle", inputTitle);
		}
		if(!StringUtils.isBlank(inputStatus)){
			model.addAttribute("inputStatus", inputStatus);
		}
		if(!StringUtils.isBlank(inputPattern)){
			model.addAttribute("inputPattern", inputPattern);
		}
		return "statistic/rankview/edit";
	}
	@RequiresPermissions("statistic:rankview:o_create")
	@RequestMapping("/statistic/rankview/o_create.do")
	public String createRankView(HttpServletRequest request,ModelMap model,RankView rankView,Integer channelId,Integer departmentId,String pattern){
		//获取站点信息
		CmsSite site = CmsUtils.getSite(request);
		rankView.setSite(site);
		//管理员信息
		CmsUser  user = CmsUtils.getUser(request);
		rankView.setUser(user);
		//设置创建时间
		rankView.setCreateTime(DateFormatUtils.parseDate(new Date()));
		//设置栏目信息
		Channel channel ;
		if(channelId!=null){
			channel = channelMng.findById(channelId);
		}else{
			channel = null;
		}
//		CmsDepartment department;
//		if(departmentId!=null){
//			department = cmsDepartmentMng.findById(departmentId);
//		}else{
//			department = null;
//		}
		rankView.setPattern(pattern);
		rankView.setChannel(channel);
		
		rankViewSvc.create(rankView);
		//日志
		cmsLogMng.operating(request, "cms.rankview.add", "rankview_title="+rankView.getTitle());
		return "redirect:v_list.do";
	}
	@RequiresPermissions("statistic:rankview:o_update")
	@RequestMapping("/statistic/rankview/o_update.do")
	public String update(HttpServletRequest request,ModelMap model,Integer id,
			String title,Integer channelId,Integer departmentId,Date beginDate,Date endDate,Integer viewCount,String pattern,
			Integer pageNo,
			String inputTitle,String inputStatus,String inputPattern){
		RankView rankView = rankViewSvc.findById(id);
		// 获取站点信息
		CmsSite site = CmsUtils.getSite(request);
		rankView.setSite(site);
		// 管理员信息
		CmsUser user = CmsUtils.getUser(request);
		rankView.setUser(user);
		// 设置更新时间
		rankView.setUpdateTime(DateFormatUtils.parseDate(new Date()));
		if(!StringUtils.isBlank(title)){
			rankView.setTitle(title);
		}
		//不判断null，因为开始结束时间可以为空
		rankView.setBeginDate(beginDate);
		
		rankView.setEndDate(endDate);
		
		if(viewCount!=null){
			rankView.setViewCount(viewCount);
		}
		// 设置栏目信息
		Channel channel;
		if (channelId != null) {
			channel = channelMng.findById(channelId);
		} else {
			channel = null;
		}
		rankView.setChannel(channel);
		//设置部门信息
//		CmsDepartment department;
//		if(departmentId!=null){
//			department = cmsDepartmentMng.findById(departmentId);
//		}else{
//			department = null;
//		}
//		rankView.setDepartment(department);
		//设置排名模式
		rankView.setPattern(pattern);
		rankViewSvc.update(rankView);
		//日志
		cmsLogMng.operating(request, "cms.rankview.update", "rankview_id="+rankView.getId());
		
		
		return toList(request,model,pageNo,inputTitle,inputStatus,inputPattern);
	}
	@RequiresPermissions("statistic:rankview:o_delete")
	@RequestMapping("/statistic/rankview/o_delete.do")
	public String delete(HttpServletRequest request,ModelMap model,Integer id,
			Integer pageNo,
			String inputTitle,String inputStatus,String inputPattern){
		RankView rankView = rankViewSvc.findById(id);
		if(rankView!=null){
			rankViewSvc.delete(rankView);
			//日志
			cmsLogMng.operating(request, "cms.rankview.delete", "rankview_id="+rankView.getId());
		}
		return toList(request,model,pageNo,inputTitle,inputStatus,inputPattern);
	}
	
	@RequestMapping("/statistic/rankview/start.do")
	public void start(HttpServletRequest request,HttpServletResponse response,Integer id){
		PrintWriter writer = null;
		try {
			writer =  response.getWriter();
		} catch (IOException e) {
			e.printStackTrace();
		}
		Long count = rankViewSvc.getCountByStart(id);
		//只能设置一个作为前台显示的查询，所以当开启的数量是0的时候，才能开启
		if(count==0){
			RankView rankView = rankViewSvc.findById(id);
			rankView.setStatus(true);
			rankViewSvc.update(rankView);
			//日志
			cmsLogMng.operating(request, "cms.rankview.start", "rankview_id="+rankView.getId());
			writer.print("true");
		}else{
			writer.print("false");
		}
	}
	
	@RequestMapping("/statistic/rankview/shutdown.do")
	public void shutdown(HttpServletRequest request,HttpServletResponse response,Integer id){
		PrintWriter writer = null;
		try {
			writer =  response.getWriter();
		} catch (IOException e) {
			e.printStackTrace();
		}
		RankView rankView = rankViewSvc.findById(id);
		rankView.setStatus(false);
		rankViewSvc.update(rankView);
		//日志
		cmsLogMng.operating(request, "cms.rankview.shutdown", "rankview_id="+rankView.getId());
		writer.print("ok");
	}
	@RequestMapping("/statistic/rankview/v_view.do")
	public String view(HttpServletRequest request,ModelMap model,Integer id){
		if(id!=null){
			RankView rankView = rankViewSvc.findById(id);
			List<Object[]> list = new ArrayList<Object[]>();
			list = cmsStatisticSvc.statisticRankByPattern(rankView.getViewCount(), rankView.getBeginDate(), rankView.getEndDate(), rankView.getChannel()==null? null:rankView.getChannel().getId(), rankView.getSite().getId(),"checked",rankView.getPattern());
			Map<Integer, Long> listMap = new HashMap<Integer, Long>();
			for (int i = 0; i < list.size(); i++) {
				listMap.put((Integer)list.get(i)[0], (Long)list.get(i)[1]);
			}
			long total = cmsStatisticSvc.statisticRankTotalByPattern(rankView.getBeginDate(), rankView.getEndDate(),rankView.getChannel()==null? null:rankView.getChannel().getId(), rankView.getSite().getId(),"checked",rankView.getPattern());
			List<Rank> rankList = new ArrayList<Rank>();
	
			CmsDepartment department = null;
			List<CmsDepartment> dList = new ArrayList<CmsDepartment>();
			if(!StringUtils.isBlank(rankView.getPattern())){
				dList = cmsDepartmentMng.getListByCategory(rankView.getPattern());
			}
		
			for (int i = 0; i < dList.size(); i++) {
				if (dList.get(i) != null) {
					Rank rank = new Rank();
					rank.setTotal(total);
					CmsDepartment d = dList.get(i);
					if (listMap.get(d.getId()) != null) {
						rank.setCount(listMap.get(d.getId()));
					} else {
						rank.setCount(0L);
					}
					rank.setDepartmentId(d.getId());
					rank.setDepartmentName(d.getDepartmentExt().getName());
					rankList.add(rank);
				}
			}

			//对列表进行排序
			Collections.sort(rankList, new Comparator() {
				public int compare(Object a,Object b){
					return (int) (((Rank)b).getCount() - ((Rank)a).getCount());
				}
			});
			if(rankView.getViewCount()<rankList.size()){
				rankList = rankList.subList(0, rankView.getViewCount());
			}
			model.addAttribute("pattern", rankView.getPattern());
			model.addAttribute("total", total);
			model.addAttribute("rankList", rankList);
		}
		return "statistic/rankview/view";

	}
	@Autowired
	protected CmsLogMng cmsLogMng;
	@Autowired
	private CmsDepartmentMng cmsDepartmentMng;
	@Autowired
	private ChannelMng channelMng;
	@Autowired
	private CmsUserMng cmsUserMng;
	@Autowired
	private RankViewSvc rankViewSvc;
	@Autowired
	private CmsDictionaryMng dictionaryMng;
	@Autowired
	private CmsStatisticSvc cmsStatisticSvc; 
	/**
	 *
	 * @Description:创建显示数量列表
	 *
	 * @return List
	 *
	 * @author zhengpp
	 *
	 * @date 2015年12月28日 上午10:10:04
	 */
	private List<RankView> createCountList(int i) {
		List<RankView> viewCount = new ArrayList<RankView>();
		for (int j = 1; j <= i; j++) {
			RankView rankView = new RankView();
			rankView.setId(j);
			rankView.setTitle("前"+j+"名");
			viewCount.add(rankView);
		}
		return viewCount;
	}
}
